---

apiVersion: v1
kind: Namespace
metadata:
  name: istio-egress
---

apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: mesh-default
  namespace: istio-system
spec:
  accessLogging:
    - providers:
        - name: envoy
---

########
### Gateway and related deployment, bindings
########
##
##{%- for lab, elem1 in workloads['gateway'].items() %}
##apiVersion: networking.istio.io/v1alpha3
##kind: Gateway
##metadata:
##  name: egressgateway--{{ lab }}
##  namespace: istio-egress
##spec:
##  selector:
##    istio: egressgateway--{{ lab }}
##  servers:
##  {%- for port, elem2 in elem1.items() %}
##    {%- if port == "443" %}
##    - port:
##        number: 443
##        name: tls-egress-{{ port }}
##        protocol: TLS
##      hosts:
##      {%- for host in elem2 %}
##        - "{{ host }}"
##      {%- endfor %}
##      tls:
##        mode: PASSTHROUGH
##    {% else %}
##    - port:
##        number: {{ port | int }}
##        name: http-egress-{{ port }}
##        protocol: HTTP
##      hosts:
##      {%- for host in elem2 %}
##        - "{{ host }}"
##      {%- endfor %}
##    {% endif %}
##  {%- endfor %}
##---
##
### Gateway deployment with injection method
##apiVersion: apps/v1
##kind: Deployment
##metadata:
##  name: egressgateway--{{lab}}
##  namespace: istio-egress
##spec:
##  selector:
##    matchLabels:
##      istio: egressgateway--{{ lab }}
##  template:
##    metadata:
##      annotations:
##        inject.istio.io/templates: gateway
##      labels:
##        istio: egressgateway--{{ lab }}
##        sidecar.istio.io/inject: "true"
##    spec:
##      containers:
##        - name: istio-proxy
##          image: auto  # The image will automatically update each time the pod starts.
##          securityContext:
##            capabilities:
##              drop:
##                - ALL
##            runAsUser: 1337
##            runAsGroup: 1337
##---
##
# Set up roles to allow reading credentials for TLS
##apiVersion: rbac.authorization.k8s.io/v1
##kind: Role
##metadata:
##  name: egressgateway-sds--{{ lab }}
##  namespace: istio-egress
##rules:
##  - apiGroups: [""]
##    resources: ["secrets"]
##    verbs: ["get", "watch", "list"]
##  - apiGroups:
##      - security.openshift.io
##    resourceNames:
##      - anyuid
##    resources:
##      - securitycontextconstraints
##    verbs:
##      - use
##---
##
##apiVersion: rbac.authorization.k8s.io/v1
##kind: RoleBinding
##metadata:
##  name: egressgateway-sds--{{ lab }}
##  namespace: istio-egress
##roleRef:
##  apiGroup: rbac.authorization.k8s.io
##  kind: Role
##  name: egressgateway-sds--{{ lab }}
##subjects:
##  - kind: ServiceAccount
##    name: default
##---
##{%- endfor %}

######
# Service Entries for hosts
######

{%- for service_entry in workloads['service_entry_hosts'] %}
  {%- set hosts = service_entry['host'] %}
  {%- set profile = service_entry['profile'] %}
  {%- set port = service_entry['port'] %}
  {%- set port_redirect = service_entry['port_redirect'] %}
  {%- set lab = service_entry['lab'] %}
  {%- set namespace = service_entry['namespace'] %}

apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: {{ lab }}--{{ profile }}--{{ port }}--hosts
  namespace: istio-egress
spec:
  hosts:
  {%- for host in hosts %}
    - "{{ host }}"
  {%- endfor %}
  ports:
    {%- if port == "443" %}
    - number: 443
      name: tls-{{ port }}
      protocol: HTTPS
    {% else %}
    - number: {{ port | int }}
      name: http-{{ port }}
      protocol: HTTP
##      {%- if port_redirect is defined and port_redirect | int > 0 %}
##      targetPort: {{ port_redirect | int }}
##      {%- endif -%}
    {%- endif %}
  resolution: DNS
  location: MESH_EXTERNAL
  exportTo:
    - "."
    - "{{ namespace }}"
---
{%- endfor %}

######
# Service Entries for IPs  
######

{%- for service_entry in workloads['service_entry_ips'] %}
  {%- set ips = service_entry['ip'] %}
  {%- set profile = service_entry['profile'] %}
  {%- set port = service_entry['port'] %}
  {%- set port_redirect = service_entry['port_redirect'] %}
  {%- set lab = service_entry['lab'] %}
  {%- set namespace = service_entry['namespace'] %}

apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: {{ lab }}--{{ profile }}--{{ port }}--ips
  namespace: istio-egress
spec:
  hosts:
    - "dummy.local"
  addresses:
  {%- for ip in ips %}
    - "{{ ip }}"
  {%- endfor %}
  ports:
    {%- if port == "443" %}
    - number: 443
      name: tls-{{ port }}
      protocol: HTTPS
    {% else %}
    - number: {{ port | int }}
      name: http-{{ port }}
      protocol: HTTP
#      {%- if port_redirect is defined and port_redirect | int > 0 %}
#      targetPort: {{ port_redirect | int }}
#      {%- endif -%}
    {%- endif %}
  resolution: STATIC
  location: MESH_EXTERNAL
  exportTo:
    - "."
    - "{{ namespace }}"
---
{%- endfor %}

#########
#### Destination Rules
#########
##
##{%- for destination_rule in workloads['destination_rule'] %}
##  {%- set hosts = destination_rule['host'] %}
##  {%- set profile = destination_rule['profile'] %}
##  {%- set port = destination_rule['port'] %}
##  {%- set port_redirect = destination_rule['port_redirect'] %}
##  {%- set lab = destination_rule['lab'] %}
##  {%- set namespace = destination_rule['namespace'] %}
##  {%- set timeout = destination_rule['timeout'] %}
##
##
##  {%- for host in hosts %}
##apiVersion: networking.istio.io/v1beta1
##kind: DestinationRule
##metadata:
##  name: {{ lab }}--{{ profile }}--{{ port }}--{{ host }}
##  namespace: istio-egress
##spec:
##  host: {{ host }}
##  workloadSelector:
##    matchLabels:
##      se-lab: {{ lab }}
##      se-profile: {{ profile }}
##  trafficPolicy:
##    tls:
##      mode: ISTIO_MUTUAL
##    portLevelSettings:
##      - port:
##          number: {{ port | int }}
##        connectionPool:
##          tcp:
##            connectTimeout: "{{ timeout }}"
##        {%- if port_redirect == '443' %}
##        tls:
##          mode: SIMPLE
##        {%- endif %}
##  exportTo:
##    - "."
##---
##
##    {%- if port_redirect is defined and port_redirect | int > 0 %}
##apiVersion: networking.istio.io/v1beta1
##kind: DestinationRule
##metadata:
##  name: {{ lab }}--{{ profile }}--{{ port_redirect }}--{{ host }}
##  namespace: istio-egress
##spec:
##  host: {{ host }}
##  workloadSelector:
##    matchLabels:
##      se-lab: {{ lab }}
##      se-profile: {{ profile }}
##  trafficPolicy:
##    tls:
##      mode: ISTIO_MUTUAL
##    portLevelSettings:
##      - port:
##          number: {{ port_redirect | int }}
##        connectionPool:
##          tcp:
##            connectTimeout: "{{ timeout }}"
##  exportTo:
##    - "."
##---
##    {%- endif %}
##  {%- endfor %}
## 
##apiVersion: networking.istio.io/v1beta1
##kind: DestinationRule
##metadata:
##  name: egressgateway--{{ lab }}--wildhosts
##  namespace: istio-egress
##spec:
##  host: egressgateway--{{ lab }}.istio-egress.svc.cluster.local
##  subsets:
##    - name: wildhosts
##---
##{%- endfor %}

######
# Virtual Services 
######

{%- for virtual_services in workloads['virtual_services'] %}
  {%- set hosts = virtual_services['host'] %}
  {%- set profile = virtual_services['profile'] %}
  {%- set port = virtual_services['port'] %}
  {%- set port_redirect = virtual_services['port_redirect'] %}
  {%- set lab = virtual_services['lab'] %}
  {%- set namespace = virtual_services['namespace'] %}
  {%- set list_type = virtual_services['list_type'] %}
  {%- set timeout = virtual_services['timeout'] %}

  {%- for host in hosts %}
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: {{ lab }}--{{ profile }}--{{ port }}--{{ host }}
  namespace: istio-egress
spec:
  hosts:
    - {{ host }}
  gateways:
    - mesh
  {% if port == '443' %}
  tls:
    - match:
        - port: 443
          sniHosts:
            - {{ host }}
      route:
        - destination:
      {%- if list_type == 'white' %}
            host: {{ host }}
      {%- elif list_type == 'black' %}
            host: blackhole.local
      {%- endif %}
          ##  subset: wildhosts
            port:
              number: 443
          weight: 100
    {% else %}
  http:
    - timeout: "{{ timeout }}"
      match:
        - port: {{ port }}
      route:
        - destination:
      {%- if list_type == 'white' %}
            host: {{ host }}
      {%- elif list_type == 'black' %}
            host: blackhole.local
      {%- endif %}
        ##    subset: wildhosts
            port:
              number: {{ port }}
          weight: 100
    {% endif %}
  exportTo:
    - "."
    - "{{ namespace }}"
---

##apiVersion: networking.istio.io/v1beta1
##kind: VirtualService
##metadata:
##  name: {{ lab }}--{{ profile }}--{{ port }}--{{ host }}
##  namespace: istio-egress
##spec:
##  hosts:
##    - {{ host }}
##  gateways:
##    - egressgateway--{{ lab }}
##    {% if port == '443' %}
##  tls:
##    - match:
##        - gateways:
##            - egressgateway--{{ lab }}
##          port: 443
##          sniHosts:
##            - {{ host }}
##      route:
##        - destination:
##            host: {{ host }}
##            port: 
##              number: 443
##          weight: 100
##    {% else %}
##  http:
##    - match:
##        - gateways:
##            - egressgateway--{{ lab }}
##          port: {{ port }}
##      route:
##        - destination:
##            host: {{ host }}
##            port: 
##  ##            {%- if port_redirect is defined and port_redirect | int > 0 %}
##  ##            number: {{ port_redirect }}
##  ##            {%- else %}
##              number: {{ port }}
##  ##            {%- endif %}
##          weight: 100
##  #    timeout: 30s
##    {% endif %}
##  # Dummy routing instruction. If omitted, no reference will point to the Gateway
##  # definition, and istiod will optimise the whole new listener out.
##  tcp:
##    - match:
##        - gateways:
##            - egressgateway--{{ lab }}
##          port: 8443
##      route:
##        - destination:
##            host: "dummy.local"
##          weight: 100
##  exportTo:
##    - "{{ namespace }}"
##---
  {% endfor -%}

{%- endfor %}

######
# Sidecars
######

# Define default sidecars that apply if a workload is not selected
# Don't allow any egress traffic
apiVersion: networking.istio.io/v1beta1
kind: Sidecar
metadata:
  name: wildlabs--no-workload--wildports--nohosts
  namespace: istio-egress
spec:
  outboundTrafficPolicy:
    mode: "REGISTRY_ONLY"
  egress:
    - hosts:
        - "~/*"
---

{%- for sidecar in workloads['sidecar'] %}

  {%- set lab = sidecar['lab'] %}
  {%- set profile = sidecar['profile'] %}
  {%- set namespace = sidecar['namespace'] %}
  {%- set hosts = sidecar['host'] %}
  {%- set list_type = sidecar['list_type'] %}

# Define sidecar when egress profile is 'none'
# This turns off any egress controls and allows all traffic
apiVersion: networking.istio.io/v1beta1
kind: Sidecar
metadata:
  name: {{ lab }}--none--wildports--wildhosts
  namespace: {{ namespace }}
spec:
  outboundTrafficPolicy:
    mode: "ALLOW_ANY"
  workloadSelector:
    labels:
      se-lab: {{ lab }}
      se-profile: none
  egress:
    - hosts:
        - "*/*"
---

apiVersion: networking.istio.io/v1beta1
kind: Sidecar
metadata:
  name: {{ lab }}--{{ profile }}--wildports--hosts
  namespace: {{ namespace }}
spec:
  outboundTrafficPolicy:
    {%- if list_type == 'white' %}
    mode: "REGISTRY_ONLY"
    {%- elif list_type == 'black' %}
    mode: "ALLOW_ANY"
    {%- endif %}
  workloadSelector:
    labels:
      se-lab: {{ lab }}
      se-profile: {{ profile }}
  egress:
    - hosts:
      {%- for host in hosts %}
        - "istio-egress/{{ host }}"
      {%- endfor %}
---
{%- endfor %}

######
# Envoy Filters
######

##apiVersion: networking.istio.io/v1alpha3
##kind: EnvoyFilter
##metadata:
##  name: sni-magic
##  namespace: istio-system
##spec:
##  configPatches:
##    - applyTo: CLUSTER
##      match:
##        context: GATEWAY
##      patch:
##        operation: ADD
##        value:
##          name: sni_cluster
##          load_assignment:
##            cluster_name: sni_cluster
##            endpoints:
##              - lb_endpoints:
##                  - endpoint:
##                      address:
##                        envoy_internal_address:
##                          server_listener_name: sni_listener
##    - applyTo: CLUSTER
##      match:
##        context: GATEWAY
##      patch:
##        operation: ADD
##        value:
##          name: dynamic_forward_proxy_cluster
##          lb_policy: CLUSTER_PROVIDED
##          cluster_type:
##            name: envoy.clusters.dynamic_forward_proxy
##            typed_config:
##              "@type": type.googleapis.com/envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig
##              dns_cache_config:
##                name: dynamic_forward_proxy_cache_config
##                dns_lookup_family: V4_ONLY
##
##    - applyTo: LISTENER
##      match:
##        context: GATEWAY
##      patch:
##        operation: ADD
##        value:
##          name: sni_listener
##          internal_listener: {}
##          listener_filters:
##            - name: envoy.filters.listener.tls_inspector
##              typed_config:
##                "@type": type.googleapis.com/envoy.extensions.filters.listener.tls_inspector.v3.TlsInspector
##
##          filter_chains:
##            - filter_chain_match:
##                server_names:
##                  - "github.com"
##              filters:
##                - name: envoy.filters.network.sni_dynamic_forward_proxy
##                  typed_config:
##                    "@type": type.googleapis.com/envoy.extensions.filters.network.sni_dynamic_forward_proxy.v3.FilterConfig
##                    port_value: 443
##                    dns_cache_config:
##                      name: dynamic_forward_proxy_cache_config
##                      dns_lookup_family: V4_ONLY
##                - name: envoy.tcp_proxy
##                  typed_config:
##                    "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
##                    stat_prefix: tcp
##                    cluster: dynamic_forward_proxy_cluster
##                    access_log:
##                      - name: envoy.access_loggers.file
##                        typed_config:
##                          "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
##                          path: "/dev/stdout"
##                          log_format:
##                            text_format_source:
##                              inline_string: '[%START_TIME%] "%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%
##                                %PROTOCOL%" %RESPONSE_CODE% %RESPONSE_FLAGS% %RESPONSE_CODE_DETAILS% %CONNECTION_TERMINATION_DETAILS%
##                                "%UPSTREAM_TRANSPORT_FAILURE_REASON%" %BYTES_RECEIVED% %BYTES_SENT% %DURATION%
##                                %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% "%REQ(X-FORWARDED-FOR)%" "%REQ(USER-AGENT)%"
##                                "%REQ(X-REQUEST-ID)%" "%REQ(:AUTHORITY)%" "%UPSTREAM_HOST%" %UPSTREAM_CLUSTER%
##                                %UPSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_REMOTE_ADDRESS%
##                                %REQUESTED_SERVER_NAME% %ROUTE_NAME%
##
##                                '
##    - applyTo: NETWORK_FILTER
##      match:
##        context: GATEWAY
##        listener:
##          filterChain:
##            filter:
##              name: "envoy.filters.network.tcp_proxy"
##      patch:
##        operation: MERGE
##        value:
##          name: envoy.tcp_proxy
##          typed_config:
##            "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
##            stat_prefix: tcp
##            cluster: sni_cluster
---


{%- for envoy_filter in workloads['envoy_filter'] %}
  {%- set lab = envoy_filter['lab'] %}
  {%- set profile = envoy_filter['profile'] %}
  {%- set namespace = envoy_filter['namespace'] %}
  {%- set rate = envoy_filter['rate'] %}

apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: filter-ratelimit--{{ lab }}--{{ profile }}--wildports--wildhosts
  namespace: istio-system
spec:
  workloadSelector:
    labels:
      se-lab: {{ lab }}
      se-profile: {{ profile }}
  configPatches:
##    - applyTo: NETWORK_FILTER
##      match:
##        context: SIDECAR_OUTBOUND
##        listener:
##          filterChain:
##            filter:
##              name: "envoy.filters.network.http_connection_manager"
##      patch:
##        operation: INSERT_FIRST
##        value:
##          name: envoy.filters.network.local_ratelimit
##          typed_config:
##            "@type": type.googleapis.com/udpa.type.v1.TypedStruct
##            type_url: type.googleapis.com/envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit
##            value:
##              stat_prefix: local_rate_limiter
##              token_bucket:
##                max_tokens: {{ rate | int }}
##                tokens_per_fill: {{ rate | int }}
##                fill_interval: 10s
    - applyTo: NETWORK_FILTER
      match:
        context: SIDECAR_OUTBOUND
      patch:
        operation: INSERT_FIRST
        value:
          name: envoy.filters.local_ratelimit
          typed_config:
            "@type": type.googleapis.com/udpa.type.v1.TypedStruct
            type_url: type.googleapis.com/envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit
            value:
              stat_prefix: local_rate_limiter
              token_bucket:
                max_tokens: {{ rate | int }}
                tokens_per_fill: {{ rate | int }}
                fill_interval: 10s

---
{% endfor -%}
 

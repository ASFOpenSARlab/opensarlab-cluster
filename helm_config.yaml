# !!!! This config is used in the first round of Franz's labs. It will not be used afterwards. Though some of the settings could still prove useful.
#
# This helm config file modifies the defaults found in zero-to-jupyterhub-k8s/jupyterhub/
# Possible values are scattered throughout the doc starting at https://z2jh.jupyter.org/en/latest/setup-jupyterhub.html

auth:
  admin:
    users:
    - ADMIN_USER

prePuller:
  continuous:
    enabled: true
  hook:
    enabled: true

proxy:
  https:
    enabled: false
  secretToken: SECRET_TOKEN
  service:
    nodePorts:
      http: NODE_PORT
    type: NodePort

singleuser:
  extraEnv:
    AWS_ACCESS_KEY_ID: NODE_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: NODE_SECRET_KEY
    CHOWN_HOME: 'yes'
  storage:
    type: "static"
    static:
      pvcName: "efs-persist"
      subPath: 'home/{username}'
  memory:
    guarantee: 6G
  image:
    name: IMAGE_NAME
    tag: IMAGE_TAG
  #uid: 0
  #fsGid: 0
  #cmd: "start-singleuser.sh"

hub:
    extraConfig:
        mySubdomainConfig.py: |
            print("Subdomain not implemented...")
            #import z2jh
            #c.JupyterHub.subdomain_host = f"{z2jh.get_config('custom.OAUTH_JUPYTER_URL')}"

        myCustomTemplatePaths.py: |
            c.JupyterHub.template_paths = ["/srv/jupyterhub"]

        myAuthConfig.py: |
            # The try/except is needed since the hub needs to be created before earthdata.py is copied over to /svc/jupyterhub/
            # After copying, the hub will need to be forced to rebuild. However, the earthdata file will persist.
            # The try/expect can be removed after the earthdata module is formally integrated into the official oauthenticator module repo.
            try:
                # The following three lines are a hack to make things work and will not be needed in the final product
                import sys
                import os
                import z2jh

                oauth_dns_name = z2jh.get_config("custom.OAUTH_DNS_NAME")
                oauth_jupyter_url = z2jh.get_config("custom.OAUTH_JUPYTER_URL")
                oauth_client_id = z2jh.get_config("custom.OAUTH_CLIENT_ID")
                oauth_client_secret = z2jh.get_config("custom.OAUTH_CLIENT_SECRET")

                os.environ["OAUTH2_AUTHORIZE_URL"] = f"{oauth_dns_name}/oauth2/authorize"
                os.environ["OAUTH2_TOKEN_URL"] = f"{oauth_dns_name}/oauth2/token"
                os.environ["OAUTH2_USERDATA_URL"] = f"{oauth_dns_name}/oauth2/userInfo"
                os.environ["OAUTH_CALLBACK_URL"] = f"{oauth_jupyter_url}/hub/oauth_callback"
                os.environ["OAUTH_LOGOUT_URL"] = f"{oauth_dns_name}/logout?client_id={oauth_client_id}&logout_uri={oauth_jupyter_url}"
                os.environ["OAUTH_CLIENT_ID"] = f"{oauth_client_id}"
                os.environ["OAUTH_CLIENT_SECRET"] = f"{oauth_client_secret}"

                sys.path.append("/srv/jupyterhub")
                from generic_with_logout import GenericOAuthenticator
                c.JupyterHub.authenticator_class = GenericOAuthenticator
                c.GenericOAuthenticator.login_service = 'AWS Cognito'
            except Exception as e:
                print(e)

        myHooksConfig.py: |
            import os
            from pathlib import Path
            from subprocess import check_output

            def my_pre_hook(spawner):
                out = check_output(['echo', 'Inside pre-hook'])
                print(out)

                home = str(Path.home())
                print(os.listdir(home))

                try:
                    print(os.listdir("/home/jovyan"))
                except Exception as e:
                    print(e)

            c.Spawner.pre_spawn_hook = my_pre_hook

            def my_post_hook(spawner):
                out = check_output(['echo', 'Inside post-hook'])
                print(out)

            c.Spawner.post_stop_hook = my_post_hook
            c.Spawner.delete_grace_period = 10

            c.KubeSpawner.lifecycle_hooks = {
                "postStart": {
                    "exec": {
                        "command": ["touch", "Hello_pre_life.txt"]
                    }
                },
                "preStop": {
                    "exec": {
                        "command": ["date"]
                    }
                }
            }

custom:
  OAUTH_JUPYTER_URL: OAUTH_JUPYTER_URL
  OAUTH_CLIENT_ID: OAUTH_CLIENT_ID
  OAUTH_CLIENT_SECRET: OAUTH_CLIENT_SECRET
  OAUTH_DNS_NAME: OAUTH_DNS_NAME

cull:
  enabled: true
  timeout: 3600
  every: 300

scheduling:
  userScheduler:
    enabled: true
  #podPriority:
    #enabled: true
  #userPlaceholder:
    #replicas: 1
    #globalDefault: true
    #defaultPriority: 10
    #userPlaceholderPriority: 0
  #userPods:
    #nodeAffinity:
      #matchNodePurpose: require  # hub.jupyter.org/node-purpose=user

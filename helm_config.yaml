# !!!! This config is used in the first round of Franz's labs. It will not be used afterwards. Though some of the settings could still prove useful.
#
# This helm config file modifies the defaults found in zero-to-jupyterhub-k8s/jupyterhub/
# Possible values are scattered throughout the doc starting at https://z2jh.jupyter.org/en/latest/setup-jupyterhub.html

auth:
  admin:
    users:
    - ADMIN_USER

prePuller:
  continuous:
    enabled: true
  hook:
    enabled: true

proxy:
  https:
    enabled: false
  secretToken: SECRET_TOKEN
  service:
    nodePorts:
      http: NODE_PORT
    type: NodePort

singleuser:
  storage:
    dynamic:
      storageClass: ebs_sc
      pvcNameTemplate: claim-{username}
  extraEnv:
    AWS_ACCESS_KEY_ID: NODE_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: NODE_SECRET_KEY
  storage:
    capacity: 500Gi
  memory:
    limit: 16G
    guarantee: 6G

hub:
    image:
      imagePullPolicy: Always
      name: 553778890976.dkr.ecr.us-east-1.amazonaws.com/jupyter-hub
      tag: HUB_IMAGE_TAG

    extraConfig:
        myAdminAccess.py: |
            #print("Admin user access not implemented...")
            c.JupyterHub.admin_access = True

        myAuthConfig.py: |
            import z2jh

            c.JupyterHub.authenticator_class = 'nativeauthenticator.NativeAuthenticator'
            c.Authenticator.admin_users = {'emlundell_test1'}
            c.Authenticator.check_common_password = True
            c.Authenticator.minimum_password_length = 10
            #c.Authenticator.allowed_failed_logins = 3
            #c.Authenticator.seconds_before_next_try = 10
            #c.Authenticator.enable_signup = False
            #c.Authenticator.open_signup = True
            c.Authenticator.ask_email_on_signup = True
            #c.Authenticator.add_two_factor_authentication = True

        myHooks.py: |
            import z2jh

            # Before mounting the home directory, check to see if a volume exists.
            # If it doesn't, check for any EBS snapshots.
            # If a snapshot exists, create a volume from the snapshot.
            # Let JupyertHub do the mounting and other volume handling.
            def my_pre_hook(spawner):
                try:
                    from volume_from_snapshot import volume_from_snapshot

                    meta = {
                        'username': spawner.user.name,
                        'pvc_name': spawner.pvc_name,
                        'namespace': 'jupyter',
                        'cluster_name': z2jh.get_config('custom.CLUSTER_NAME'),
                        'az_name': z2jh.get_config('custom.AZ_NAME'),
                        'aws_secret_access_key': z2jh.get_config('custom.HUB_SECRET_ACCESS_KEY'),
                        'aws_access_key_id': z2jh.get_config('custom.HUB_ACCESS_KEY_ID'),
                        'spawn_pvc': spawner.get_pvc_manifest()
                    }

                    try:
                        meta['vol_size'] = int(z2jh.get_config('custom.VOLUME_SIZE'))
                    except:
                        meta['vol_size'] = 500

                    volume_from_snapshot(meta)

                except Exception as e:
                    print(e)
                    raise

            c.Spawner.pre_spawn_hook = my_pre_hook


            # After stopping the notebook server, tag the volume with the current "stopping" time. This will help determine which volumes are active.
            def my_post_hook(spawner):
                try:
                    from volume_stopping_tags import volume_stopping_tags

                    meta = {
                        'pvc_name': spawner.pvc_name,
                        'cluster_name': z2jh.get_config('custom.CLUSTER_NAME'),
                        'az_name': z2jh.get_config('custom.AZ_NAME'),
                        'aws_secret_access_key': z2jh.get_config('custom.HUB_SECRET_ACCESS_KEY'),
                        'aws_access_key_id': z2jh.get_config('custom.HUB_ACCESS_KEY_ID')
                    }

                    volume_stopping_tags(meta)

                except Exception as e:
                    print(e)
                    raise

            c.Spawner.post_stop_hook = my_post_hook


            # Run gitpuller after mounting volume
            c.KubeSpawner.lifecycle_hooks = {
                "postStart": {
                    "exec": {
                        "command": ["/bin/sh", "-c", "gitpuller https://github.com/asfadmin/asf-jupyter-notebooks.git master /home/jovyan/notebooks;"]
                    }
                }
            }

        myHubCron.py: |
            import os
            import z2jh
            try:
                from crontab import CronTab

                days_inactive_till_termination = 5

                # Set metadata for use by cron scripts
                meta = [
                    "---",
                    "days_inactive_till_termination: {days_inactive_till_termination}",
                    "namespace: jupyter",
                    "cluster_name: {cluster_name}",
                    "region_name: {region_name}",
                    "aws_secret_access_key: {aws_secret_access_key}",
                    "aws_access_key_id: {aws_access_key_id}",
                    "kubernetes_service_port: '{kubernetes_service_port}'",
                    "kubernetes_service_host: {kubernetes_service_host}"
                ]
                meta = "\n".join(meta).format(
                    days_inactive_till_termination=days_inactive_till_termination,
                    region_name=z2jh.get_config('custom.AZ_NAME')[:-1],
                    cluster_name=z2jh.get_config('custom.CLUSTER_NAME'),
                    aws_secret_access_key=z2jh.get_config('custom.HUB_SECRET_ACCESS_KEY'),
                    aws_access_key_id=z2jh.get_config('custom.HUB_ACCESS_KEY_ID'),
                    kubernetes_service_port=os.environ['KUBERNETES_SERVICE_PORT'],
                    kubernetes_service_host=os.environ['KUBERNETES_SERVICE_HOST']
                )
                with open("/etc/jupyterhub/custom/meta.yaml", mode='w') as f:
                    f.write(meta)

                # Make file executable
                os.chmod('/etc/jupyterhub/custom/meta.yaml', 0o755)

                # Setup crontab for volume killer
                cron = CronTab(user='jovyan')

                job1 = cron.new(command='python3 /etc/jupyterhub/custom/delete_volumes.py > /etc/jupyterhub/custom/delete_volumes.log')
                job1.hour.on(12)  # 12 UTC, 3am AKDT
                job1.enable()

                # Setup crontab for snapshot killer
                job2 = cron.new(command='python3 /etc/jupyterhub/custom/delete_snapshot.py > /etc/jupyterhub/custom/delete_snapshot.log')
                job2.hour.on(13)  # 13 UTC, 4am AKDT
                job2.enable()

                cron.write()

            except Exception as e:
                print(e)

        myProfiles.py: |

            from typing import List, Dict

            # Profile list programmatically
            # Ideally, if/else statements based on permissions would deterfrom typing import List, Dictmine the final choices.
            # https://jupyterhub-kubespawner.readthedocs.io/en/latest/spawner.html#kubespawner.KubeSpawner
            # Other singleuser server params can be taken from above to below as needed.

            def profile_list_hook(spawner: c.Spawner) -> List[Dict]:
                try:

                    import group as group_py

                    groups = group_py.Groups(db=db)
                    group_list = groups.get_group_names_for_user(name)

                    profile_list = []
                    if 'general_cpu' in group_list:
                        profile = {
                            'display_name': 'General SAR processing',
                            'description': 'Contains basic SAR processing and analysis tools',
                            'default': True,
                            'kubespawner_override': {
                                'extra_labels': {
                                    'server_type': 'general_cpu'
                                },
                                'node_selector': {
                                    'server_type': 'general_cpu'
                                },
                                'image': "{0}:{1}".format(z2jh.get_config('custom.IMAGE_NAME'), z2jh.get_config('custom.IMAGE_TAG'))
                            }
                        }
                        profile_list.append(profile)

                    if 'general_gpu' in group_list:
                        profile = {
                            'display_name': 'General SAR processing including GPU support',
                            'description': 'Contains basic SAR processing and analysis tools',
                            'default': False,
                            'kubespawner_override': {
                                'extra_labels': {
                                    'server_type': 'general_gpu'
                                },
                                'node_selector': {
                                    'server_type': 'general_gpu'
                                },
                                'image': "{0}:{1}".format(z2jh.get_config('custom.IMAGE_NAME'), z2jh.get_config('custom.IMAGE_TAG'))
                            }
                        }
                        profile_list.append(profile)

                except Exception as e:
                    print("Something went wrong with the profiles...")
                    print(e)
                    profile_list = []

                return profile_list

            c.KubeSpawner.profile_list = profile_list_hook

        mySubdomainConfig.py: |
            print("Subdomain not implemented...")
            #import z2jh
            #c.JupyterHub.subdomain_host = f"{z2jh.get_config('custom.OAUTH_JUPYTER_URL')}"

        mySudo: |
            print("Sudo not implemented...")

            group = ('group')
            if 'sudo' in group:
                c.KubeSpawner.args = ['--allow-root']
                c.KubeSpawner.environment = {
                    "GRANT_SUDO": "yes"
                }
                c.KubeSpawner.gid = 599

custom:
  OAUTH_JUPYTER_URL: OAUTH_JUPYTER_URL
  OAUTH_CLIENT_ID: OAUTH_CLIENT_ID
  OAUTH_CLIENT_SECRET: OAUTH_CLIENT_SECRET
  OAUTH_DNS_NAME: OAUTH_DNS_NAME
  AWS_ACCESS_KEY_ID: NODE_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY: NODE_SECRET_KEY
  HUB_ACCESS_KEY_ID: HUB_ACCESS_KEY_ID
  HUB_SECRET_ACCESS_KEY: HUB_SECRET_ACCESS_KEY
  CLUSTER_NAME: CLUSTER_NAME
  AZ_NAME: AZ_NAME
  VOLUME_SIZE: VOLUME_SIZE
  IMAGE_NAME: IMAGE_NAME
  IMAGE_TAG: IMAGE_TAG

cull:
  enabled: true
  timeout: 3600
  every: 300

scheduling:
  userScheduler:
    enabled: true
    replicas: 1
  corePods:
    nodeAffinity:
      matchNodePurpose: require  # hub.jupyter.org/node-purpose=core
  userPods:
    nodeAffinity:
      matchNodePurpose: require  # hub.jupyter.org/node-purpose=user

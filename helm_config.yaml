# !!!! This config is used in the first round of Franz's labs. It will not be used afterwards. Though some of the settings could still prove useful.
#
# This helm config file modifies the defaults found in zero-to-jupyterhub-k8s/jupyterhub/
# Possible values are scattered throughout the doc starting at https://z2jh.jupyter.org/en/latest/setup-jupyterhub.html

auth:
  admin:
    users:
    - ADMIN_USER

prePuller:
  continuous:
    enabled: true
  hook:
    enabled: true

proxy:
  https:
    enabled: false
  secretToken: SECRET_TOKEN
  service:
    nodePorts:
      http: NODE_PORT
    type: NodePort

singleuser:
  extraEnv:
    AWS_ACCESS_KEY_ID: NODE_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: NODE_SECRET_KEY
  image:
    name: IMAGE_NAME
    tag: IMAGE_TAG
  storage:
    capacity: 500Gi
  memory:
    limit: 15G
    guarantee: 12G

hub:
    image:
      imagePullPolicy: Always
      name: 553778890976.dkr.ecr.us-east-1.amazonaws.com/jupyter-hub
      tag: HUB_IMAGE_TAG

    extraConfig:
        myAuthConfig.py: |
            try:
                import sys
                import os
                import z2jh

                oauth_dns_name = z2jh.get_config("custom.OAUTH_DNS_NAME")
                os.environ["OAUTH2_AUTHORIZE_URL"] = "{0}/oauth2/authorize".format(z2jh.get_config("custom.OAUTH_DNS_NAME"))
                oauth_jupyter_url = z2jh.get_config("custom.OAUTH_JUPYTER_URL")
                os.environ["OAUTH2_TOKEN_URL"] = "{0}/oauth2/token".format(z2jh.get_config("custom.OAUTH_DNS_NAME"))
                oauth_client_id = z2jh.get_config("custom.OAUTH_CLIENT_ID")
                os.environ["OAUTH2_USERDATA_URL"] = "{0}/oauth2/userInfo".format(z2jh.get_config("custom.OAUTH_DNS_NAME"))
                oauth_client_secret = z2jh.get_config("custom.OAUTH_CLIENT_SECRET")

                os.environ["OAUTH_LOGOUT_URL"] = "{0}/logout?client_id={1}&logout_uri={2}".format(z2jh.get_config("custom.OAUTH_DNS_NAME"), z2jh.get_config("custom.OAUTH_CLIENT_ID"), z2jh.get_config("custom.OAUTH_JUPYTER_URL"))
                os.environ["OAUTH2_AUTHORIZE_URL"] = f"{oauth_dns_name}/oauth2/authorize"
                os.environ["OAUTH2_TOKEN_URL"] = f"{oauth_dns_name}/oauth2/token"
                os.environ["OAUTH2_USERDATA_URL"] = f"{oauth_dns_name}/oauth2/userInfo"
                os.environ["OAUTH_CALLBACK_URL"] = f"{oauth_jupyter_url}/hub/oauth_callback"
                os.environ["OAUTH_LOGOUT_URL"] = f"{oauth_dns_name}/logout?client_id={oauth_client_id}&logout_uri={oauth_jupyter_url}"
                os.environ["OAUTH_CLIENT_ID"] = f"{oauth_client_id}"
                os.environ["OAUTH_CLIENT_SECRET"] = f"{oauth_client_secret}"

                from generic_with_logout import GenericOAuthenticator
                c.JupyterHub.authenticator_class = GenericOAuthenticator
                c.GenericOAuthenticator.oauth_callback_url = '{0}/hub/oauth_callback'.format(z2jh.get_config("custom.OAUTH_JUPYTER_URL"))
                c.GenericOAuthenticator.client_id = '{0}'.format(z2jh.get_config("custom.OAUTH_CLIENT_ID"))
                c.GenericOAuthenticator.client_secret = '{0}'.format(z2jh.get_config("custom.OAUTH_CLIENT_SECRET"))
                c.GenericOAuthenticator.login_service = 'AWS Cognito'
            except Exception as e:
                print(e)

        myHooksConfig.py: |
            try:
                import os
                import z2jh
                import boto3
                from botocore.exceptions import ClientError

                def my_pre_hook(spawner):

                    username = spawner.user.name
                    bucket = "asf-jupyter-user-data-{cluster}".format(cluster='opensarlab-test')
                    s3_role_arn = "arn:aws:iam::553778890976:role/jupyter-hub-sts-test"  # This role needs to trust the AWS subaccount and also trust the AWS User which contains the hub's creds.
                    timeout_in = 43200  # seconds. Range from 900 seconds (15 minutes) to 43200 seconds (12 hours)  # The accompying role needs to have the max duration set

                    s3_policy = """{
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "s3:*"
                                ],
                                "Resource": "arn:aws:s3:::BUCKET/USERNAME/*"
                            },
                            {
                                "Effect":"Allow",
                                "Action":[
                                    "s3:ListBucketVersions",
                                    "s3:ListBucket"
                                ],
                                "Resource":"arn:aws:s3:::BUCKET",
                                "Condition":{
                                    "StringLike": {
                                        "s3:prefix": [
                                            "USERNAME/",
                                            "USERNAME/*"
                                        ]
                                    }
                                }
                            }
                        ]
                    }""".replace('BUCKET', bucket).replace('USERNAME', username)

                    s3_client = boto3.client('s3', region_name='us-east-1', aws_secret_access_key=z2jh.get_config("custom.HUB_SECRET_ACCESS_KEY"), aws_access_key_id=z2jh.get_config("custom.HUB_ACCESS_KEY_ID"))
                    try:
                        s3_client.head_object(Bucket=bucket, Key=f'{username}/')
                        print(f"User '{username}' S3 bucket path found at 's3://{bucket}/{username}'")
                    except ClientError:
                        print("User bucket path not found. Creating...")
                        try:
                            s3_client.put_object(Bucket=bucket, Key=f'{username}/')
                        except Exception as e:
                            print("Something went wrong during creation of user bucket path. Aborting...")
                            raise

                    sts_client = boto3.client('sts', region_name='us-east-1', aws_secret_access_key=z2jh.get_config("custom.HUB_SECRET_ACCESS_KEY"), aws_access_key_id=z2jh.get_config("custom.HUB_ACCESS_KEY_ID"))
                    s3_temp_role = sts_client.assume_role(RoleArn=s3_role_arn, RoleSessionName="AssumeS3Temp", DurationSeconds=timeout_in, Policy=s3_policy)

                    os.environ['JUPYTER_S3_KEY'] = s3_temp_role['Credentials']['AccessKeyId']
                    os.environ['JUPYTER_S3_SECRET'] = s3_temp_role['Credentials']['SecretAccessKey']
                    os.environ['JUPYTER_S3_SESSION'] = s3_temp_role['Credentials']['SessionToken']
                    os.environ['JUPYTER_S3_PATH'] = f"s3://{bucket}/{username}/"

                c.Spawner.pre_spawn_hook = my_pre_hook

                c.Spawner.env_keep.append('JUPYTER_S3_KEY')
                c.Spawner.env_keep.append('JUPYTER_S3_SECRET')
                c.Spawner.env_keep.append('JUPYTER_S3_SESSION')
                c.Spawner.env_keep.append('JUPYTER_S3_PATH')

                pulling_from_s3 = True
                pushing_to_s3 = True

                command_start = "gitpuller https://github.com/asfadmin/asf-jupyter-notebooks.git master /home/jovyan/notebooks;"
                if pulling_from_s3:
                    command_start += f"AWS_ACCESS_KEY_ID=$JUPYTER_S3_KEY AWS_SECRET_ACCESS_KEY=$JUPYTER_S3_SECRET AWS_SESSION_TOKEN=$JUPYTER_S3_SESSION aws s3 sync $JUPYTER_S3_PATH /home/jovyan/;"

                if pushing_to_s3:
                    command_stop = f"AWS_ACCESS_KEY_ID=$JUPYTER_S3_KEY AWS_SECRET_ACCESS_KEY=$JUPYTER_S3_SECRET AWS_SESSION_TOKEN=$JUPYTER_S3_SESSION aws s3 sync --delete /home/jovyan/ $JUPYTER_S3_PATH;"
                else:
                    command_stop = ""

                c.KubeSpawner.lifecycle_hooks = {
                    "postStart": {
                        "exec": {
                            "command": ["/bin/sh", "-c", command_start]
                        }
                    },
                    "preStop": {
                        "exec": {
                            "command": ["/bin/sh", "-c", command_stop]
                        }
                    }
                }

            except Exception as e:
                print(e)

        mySubdomainConfig.py: |
            print("Subdomain not implemented...")
            #import z2jh
            #c.JupyterHub.subdomain_host = f"{z2jh.get_config('custom.OAUTH_JUPYTER_URL')}"

custom:
  OAUTH_JUPYTER_URL: OAUTH_JUPYTER_URL
  OAUTH_CLIENT_ID: OAUTH_CLIENT_ID
  OAUTH_CLIENT_SECRET: OAUTH_CLIENT_SECRET
  OAUTH_DNS_NAME: OAUTH_DNS_NAME
  HUB_ACCESS_KEY_ID: HUB_ACCESS_KEY_ID
  HUB_SECRET_ACCESS_KEY: HUB_SECRET_ACCESS_KEY
  AWS_ACCESS_KEY_ID: NODE_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY: NODE_SECRET_KEY

cull:
  enabled: true
  timeout: 3600
  every: 300

scheduling:
  userScheduler:
    enabled: true
  podPriority:
    enabled: true
  userPlaceholder:
    replicas: 1
    #globalDefault: true
    #defaultPriority: 10
    #userPlaceholderPriority: 0
  #userPods:
    #nodeAffinity:
      #matchNodePurpose: require  # hub.jupyter.org/node-purpose=user

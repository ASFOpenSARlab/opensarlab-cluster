
{% set service_accounts = opensciencelab.get('service_accounts', '') -%}

import argparse
import subprocess
import os
import json

import boto3

import logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] - %(message)s', datefmt='%d-%b-%y %H:%M:%S')

def do_run(cmd: str, *, env: dict = None, input: str = None) -> str:
    
    if input:
        logging.info(f"Running command: {cmd}; input={input}")
        response = subprocess.run(cmd.split(), capture_output=True, text=True, env=env, input=input)
    else:
        logging.info(f"Running command: {cmd}")
        response = subprocess.run(cmd.split(), capture_output=True, text=True, env=env)
    
    if response.returncode != 0:
        raise Exception(response.stderr)

    return response.stdout

def main(profile: str=None) -> None:

    ####################################
    # PARAMETERS ######

    {% if service_accounts is defined and service_accounts != '' -%}
    all_service_accounts = {{ service_accounts | safe }}
    {% else -%}
    all_service_accounts = None
    {% endif -%}

    logging.info(f"All possible lab service accounts: {all_service_accounts}")
    if not all_service_accounts:
        return

    if profile:
        os.environ['AWS_PROFILE'] = str(profile)

    region_name = "{{ region_name }}"

    cluster_name = "{{ cluster_name }}"

    # END PARAMETERS #####
    ####################################


    session = boto3.Session(region_name=region_name)
    iam = session.client('iam')
    eks = session.client('eks')
    sts = session.client('sts')

    response = sts.get_caller_identity()
    aws_account_id = response['Account']

    if not all_service_accounts:
        return

    for service_account_info in all_service_accounts:
        service_account_name = service_account_info.get('name')
        service_account_namespace = service_account_info.get('namespace', 'jupyter')
        service_account_permissions = service_account_info.get('permissions', '')
        service_account_trusts = service_account_info.get('trusts', [])

        #################################
        logging.info(f"**** Check if service account '{service_account_name}' exists already and create if needed")

        try:
            do_run(f"kubectl -n {service_account_namespace} get sa {service_account_name}")
            logging.info(f"Service account '{service_account_namespace}:{service_account_name}' found.")

        except Exception as e:
            logging.warning("Service account does not exist.")
            try:
                logging.info(f"Service account '{service_account_namespace}:{service_account_name}' not found. Creating...")
                out = do_run(f"kubectl -n {service_account_namespace} create sa {service_account_name} --dry-run=client -o yaml")
                out = do_run(f"kubectl apply -f -", input=out)
                logging.info(out)
            except Exception as e:
                logging.error(e)
                return

        #################################
        logging.info("**** Check if oidc-provider for cluster exists already and create if needed")
        # https://docs.aws.amazon.com/eks/latest/userguide/enable-iam-roles-for-service-accounts.html

        response = eks.describe_cluster(name=cluster_name)
        oidc_issuer = response['cluster']['identity']['oidc']['issuer']
        oidc_id = oidc_issuer.split("/")[-1]
        oidc_provider = oidc_issuer.replace("https://", '')
        logging.info(f"OIDC ID: {oidc_id}, OIDC Provider: {oidc_provider}")

        response = iam.list_open_id_connect_providers()
        provider_list = response['OpenIDConnectProviderList']

        if oidc_id not in [provider['Arn'] for provider in provider_list]:
            logging.info("oidc-provider does not exist. Creating one...")
            out = do_run(f"eksctl utils associate-iam-oidc-provider --cluster {cluster_name} --approve")
            logging.info(out)

            response = eks.describe_cluster(name=cluster_name)
            oidc_issuer = response['cluster']['identity']['oidc']['issuer']
            oidc_id = oidc_issuer.split("/")[-1]
            oidc_provider = oidc_issuer.replace("https://", '')
            logging.info(f"OIDC ID: {oidc_id}, OIDC Provider: {oidc_provider}")

        else:
            logging.info("oidc-provider does exist.")

        #################################
        ###  Create role if not exist, otherwise update role's trust and policies

        # If role exists and role has permissions policy, detach and delete policy
        # If role does not exist, create role

        iam_role_name = f"{cluster_name}-{service_account_name}-sa-role"
        iam_policy_name = f"{cluster_name}-{service_account_name}-sa-policy"

        # Role trust policy
        role_trust_policy_statement =  [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Federated": f"arn:aws:iam::{aws_account_id}:oidc-provider/{oidc_provider}"
                        },
                        "Action": "sts:AssumeRoleWithWebIdentity",
                        "Condition": {
                            "StringEquals": {
                            f"{oidc_provider}:sub": f"system:serviceaccount:{service_account_namespace}:{service_account_name}"
                            }
                        }
                    }
                ]
        role_trust_policy_statement.extend(service_account_trusts)
        role_trust_policy_json = json.dumps(
            {
                "Version": "2012-10-17",
                "Statement": role_trust_policy_statement
            }
        )

        try:
            logging.info(f"**** Does Role '{iam_role_name}' exist? If not, an error will be thrown.")
            response = iam.get_role(RoleName=iam_role_name)
            iam_role_arn = response['Role']['Arn']
            logging.info("Yes.")

            logging.info(f"**** Update trust policy of Role '{iam_role_name}'")
            iam.update_assume_role_policy(RoleName=iam_role_name, PolicyDocument=role_trust_policy_json)

        except iam.exceptions.NoSuchEntityException:
            logging.warning("**** No. Since Role does not exist, create it.")

            
            response = iam.create_role(RoleName=iam_role_name, AssumeRolePolicyDocument=role_trust_policy_json)
            iam_role_arn = response['Role']['Arn']

        logging.info(f"**** Does managed permissions policy '{iam_policy_name}' exist?") 
        # If so, detach from Role and delete it so it can be recreated later.
        response = iam.list_policies(Scope='Local')

        iam_policy_arn = None
        for policy in response['Policies']:
            if policy['PolicyName'] == iam_policy_name:
                iam_policy_arn = policy['Arn']

        if iam_policy_arn:
            
            logging.info(f"**** Yes. Detach and delete managed policy from Role '{iam_role_name}'")
            try:
                iam.detach_role_policy(RoleName=iam_role_name, PolicyArn=iam_policy_arn)
            except:
                # Perhaps the role doesn't have the policy?
                pass

            response = iam.list_policy_versions(PolicyArn=iam_policy_arn)
            for vers in response['Versions']:
                if vers['IsDefaultVersion'] == False:
                    try:
                        iam.delete_policy_version(PolicyArn=iam_policy_arn, VersionId=vers['VersionId'])
                    except:
                        pass 

            iam.delete_policy(PolicyArn=iam_policy_arn)

        else:
            logging.info("No.")

        logging.info(f"**** Create updated permissions policy '{iam_policy_name}'")
        role_permissions_policy_json = {% raw %} f"""{{"Version": "2012-10-17","Statement": { json.dumps(service_account_permissions)}}}""" {% endraw %}
        response = iam.create_policy(PolicyName=iam_policy_name, PolicyDocument=role_permissions_policy_json)
        iam_policy_arn = response['Policy']['Arn']
        logging.info(f"Permission policy has arn '{iam_policy_arn}'")

        logging.info(f"**** Add permissions policy {iam_policy_name} to role '{iam_role_name}'")
        iam.attach_role_policy(RoleName=iam_role_name, PolicyArn=iam_policy_arn)

        #################################
        logging.info(f"**** Associate role '{iam_role_name}' with Service Account '{service_account_name}'")
        out = do_run(f"kubectl -n {service_account_namespace} annotate sa --overwrite {service_account_name} eks.amazonaws.com/role-arn={iam_role_arn} --dry-run=client -o yaml")
        out = do_run("kubectl apply -f -", input=out)
        logging.info(out)

        logging.info("======")

main()

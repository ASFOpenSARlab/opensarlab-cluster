---

apiVersion: v1
kind: Namespace
metadata:
  name: external

---

apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: mesh-default
  namespace: istio-system
spec:
  accessLogging:
    - providers:
        - name: envoy

---

{%- for service_entry in workloads['service_entry_hosts'] %}

{%- set hosts = service_entry['host'] %}
{%- set profile = service_entry['profile'] %}
{%- set port = service_entry['port'] %}
{%- set port_redirect = service_entry['port_redirect'] %}
{%- set lab = service_entry['lab'] %}
{%- set namespace = service_entry['namespace'] %}

apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: {{ lab }}-{{ profile }}-{{ port }}
  namespace: external
spec:
  hosts:
  {%- for host in hosts %}
    - "{{ host }}"
  {%- endfor %}
  ports:
    {%- if port != "443" %}
    - number: {{ port | int }}
      name: http-{{ port }}
      protocol: HTTP
      {%- if port_redirect is defined %}
      targetPort: {{ port_redirect | int }}
      {%- endif %}
    {%- else %}
    - number: {{ port | int }}
      name: https-{{ port }}
      protocol: HTTPS
    {%- endif %}
  resolution: DNS
  location: MESH_EXTERNAL
  exportTo:
    - "."
    - "{{ namespace }}"
---

  {%- for host in hosts %}
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: {{ lab }}-{{ profile }}-{{ host }}-{{ port }}
  namespace: {{ namespace }}
spec:
  host: {{ host }}
  workloadSelector:
    matchLabels:
      se-lab: {{ lab }}
      se-profile: {{ profile }}
  trafficPolicy:
    portLevelSettings:
      - port:
          number: {{ port }}
        tls:
          {%- if port == '443' %}
          mode: DISABLE  # Use client's SSL
          {%- elif port_redirect == '443' %}
          mode: SIMPLE  # If redirecting to 443, make sure simple SSL is setup
          {%- else %}
          mode: DISABLE  # Not using 443 nor redirecting to 443, don't use TLS
          {%- endif %}
  exportTo:
    - "."
---
  {% endfor -%}
{% endfor -%}

{%- for service_entry in workloads['service_entry_ips'] %}

{%- set ips = service_entry['ip'] %}
{%- set profile = service_entry['profile'] %}
{%- set port = service_entry['port'] %}
{%- set port_redirect = service_entry['port_redirect'] %}
{%- set lab = service_entry['lab'] %}
{%- set namespace = service_entry['namespace'] %}

apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: {{ lab }}-{{ profile }}-{{ port }}-ips
  namespace: external
spec:
  hosts:
    - "nothing.local"
  addresses:
  {%- for ip in ips %}
    - "{{ ip }}"
  {%- endfor %}
  ports:
    {%- if port != "443" %}
    - number: {{ port | int }}
      name: http-{{ port }}
      protocol: HTTP
      {%- if port_redirect is defined and port_redirect != 'nan' %}
      targetPort: {{ port_redirect | int }}
      {%- endif %}
    {%- else %}
    - number: {{ port | int }}
      name: https-{{ port }}
      protocol: HTTPS
    {%- endif %}
  resolution: STATIC
  location: MESH_EXTERNAL
  exportTo:
    - "."
    - "{{ namespace }}"
---
{% endfor -%}

{%- for sidecar in workloads['sidecar'] %}

{%- set lab = sidecar['lab'] %}
{%- set profile = sidecar['profile'] %}
{%- set namespace = sidecar['namespace'] %}
{%- set hosts = sidecar['host'] %}
apiVersion: networking.istio.io/v1beta1
kind: Sidecar
metadata:
  name: {{ lab }}-{{ profile }}
  namespace: {{ namespace }}
spec:
  outboundTrafficPolicy: 
    mode: "REGISTRY_ONLY"
  workloadSelector:
    labels:
      se-lab: {{ lab }}
      se-profile: {{ profile }}
  egress:
    - hosts:
      {%- for host in hosts %}
        - "external/{{ host }}"
      {%- endfor %}
---
{% endfor -%}

{%- for envoy_filter in workloads['envoy_filter'] %}

{%- set lab = envoy_filter['lab'] %}
{%- set profile = envoy_filter['profile'] %}
{%- set namespace = envoy_filter['namespace'] %}
{%- set rate = envoy_filter['rate'] %}

apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: filter-ratelimit-{{ lab }}-{{ profile }}
  namespace: {{ namespace }}
spec:
  workloadSelector:
    labels:
      se-lab: {{ lab }}
      se-profile: {{ profile }}
  configPatches:
    - applyTo: NETWORK_FILTER
      match:
        context: SIDECAR_OUTBOUND
      patch:
        operation: INSERT_AFTER
        value:
          name: envoy.filters.local_ratelimit
          typed_config:
            "@type": type.googleapis.com/udpa.type.v1.TypedStruct
            type_url: type.googleapis.com/envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit
            value:
              stat_prefix: local_rate_limiter
              token_bucket:
                max_tokens: {{ rate | int }}
                tokens_per_fill: {{ rate | int }}
                fill_interval: 10s
---
{% endfor -%}

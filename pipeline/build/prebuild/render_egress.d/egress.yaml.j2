---

apiVersion: v1
kind: Namespace
metadata:
  name: external

---

apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: mesh-default
  namespace: istio-system
spec:
  accessLogging:
    - providers:
        - name: envoy

---

{%- for service_entry in workloads['service_entry'] %}
{%- set hosts = service_entry['host'] %}
{%- set ips = service_entry['ip'] %}
{%- set profile = service_entry['profile'] %}
{%- set port = service_entry['port'] %}
{%- set lab = service_entry['lab'] %}
{%- set namespace = service_entry['namespace'] %}

{%- if hosts is defined and hosts | length > 0 %}
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: {{ lab }}-{{ profile }}-{{ port }}
  namespace: external
spec:
  hosts:
  {%- for host in hosts %}
    - "{{ host }}"
  {%- endfor %}

  ports:
    - number: {{ port }}
      {%- if port == "443" %}
      name: https-{{ port }}
      protocol: HTTPS
      {%- else %}
      name: http-{{ port }}
      protocol: HTTP
      {%- endif %}
   

  resolution: DNS
  location: MESH_EXTERNAL
  exportTo:
    - "."
    - "{{ namespace }}"
---

{%- endif %}

{%- if ips is defined and ips | length > 0 %}
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: {{ lab }}-{{ profile }}-{{ port }}-ips
  namespace: external
spec:
  hosts:
    - "local.local"
  addresses:
  {%- for ip in ips %}
    - "{{ ip }}"
  {%- endfor %}
  ports:
    - number: {{ port }}
      {%- if port == "443" %}
      name: https-{{ port }}
      protocol: HTTPS
      {%- else %}
      name: http-{{ port }}
      protocol: HTTP
      {%- endif %}
  resolution: NONE
  location: MESH_EXTERNAL
  exportTo:
    - "."
    - "{{ namespace }}"
---

{%- endif %}
{% endfor %}

{%- for sidecar in workloads['sidecar'] %}
{%- set lab = sidecar['lab'] %}
{%- set profile = sidecar['profile'] %}
{%- set namespace = sidecar['namespace'] %}
{%- set hosts = sidecar['host'] %}
apiVersion: networking.istio.io/v1beta1
kind: Sidecar
metadata:
  name: {{ lab }}-{{ profile }}
  namespace: {{ namespace }}
spec:
  outboundTrafficPolicy: 
    mode: "REGISTRY_ONLY"
  workloadSelector:
    labels:
      se-lab: {{ lab }}
      server_type: {{ profile }}
  egress:
    - hosts:
      {%- for host in hosts %}
        - "external/{{ host }}"
      {%- endfor %}
---
{% endfor %}

apiVersion: v1
kind: ConfigMap
metadata:
  name: envoy-config
data:
  envoy.yaml: |
    static_resources:
      listeners:
        # Listener for Port 443
        - address:
            socket_address:
              address: 0.0.0.0
              port_value: 443
          filter_chains:
            - filters:
                - name: envoy.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                    stat_prefix: ingress_http_443
                    route_config:
                      name: local_route_443
                      virtual_hosts:
                        - name: local_service_443
                          domains: ["*"]
                          routes:
                            - match: { prefix: "/" }
                              route: { cluster: outbound|443||* }
                    http_filters:
                      - name: envoy.filters.http.local_ratelimit
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
                          value:
                            stat_prefix: http_local_rate_limiter
                            token_bucket:
                              max_tokens: 2
                              tokens_per_fill: 2
                              fill_interval: 60s
                            filter_enabled:
                              runtime_key: local_rate_limit_enabled
                              default_value:
                                numerator: 100
                                denominator: HUNDRED
                            filter_enforced:
                              runtime_key: local_rate_limit_enforced
                              default_value:
                                numerator: 100
                                denominator: HUNDRED
                            response_headers_to_add:
                              - append: false
                                header:
                                  key: x-local-rate-limit
                                  value: 'true'
                      - name: envoy.filters.http.router

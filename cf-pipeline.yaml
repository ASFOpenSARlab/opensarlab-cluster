AWSTemplateFormatVersion: "2010-09-09"

Parameters:

  CodeCommitRepoName:
    Type: String
    Description: "Name of the code commit repo holding your <deployment_name>-cluster code"
    Default: ""

  CodeCommitBranchName:
    Type: String
    Description: "Name of the branch holding this deployment's cluster code"
    Default: ""

  CostTagKey:
    Type: String
    Description: "The name of the cost allocation tag you set up in AWS to track deployment costs, i.e. deployment_name"
    Default: ""

  CostTagValue:
    Type: String
    Description: "The value of the cost tag used for filtering the budget, etc."
    Default: "" # should match CostTagValue used in cf-cognito.yaml and cf-cluster.yaml

Outputs:
  CommonRoleArn:
    Description: "Common role arn"
    Value: !GetAtt CommonRole.Arn
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-cluster-${AWS::AccountId}-common-role-arn

Resources:
  CommonRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::Region}-${AWS::StackName}-common-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
                - codebuild.amazonaws.com
                - codepipeline.amazonaws.com
                - eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/AutoScalingFullAccess
      Policies:
        - PolicyName: !Sub ${AWS::Region}-${AWS::StackName}-GetPassRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "iam:GetRole"
                  - "iam:PassRole"
                Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/*
                Condition:
                  "StringEquals":
                    "iam:PassedToService":
                      - "eks.amazonaws.com"
                      - "cloudformation.amazonaws.com"
                      - "codepipeline.amazonaws.com"
                      - "codebuild.amazonaws.com"
        - PolicyName: !Sub ${AWS::Region}-${AWS::StackName}-hub-build
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "codestar-connections:*"
                  - "s3:*"
                  - "dlm:*"
                  - "logs:*"
                  - "cloudformation:*"
                  - "elasticloadbalancing:*"
                  - "autoscaling:*"
                  - "codebuild:*"
                  - "iam:*"
                  - "secretsmanager:*"
                  - "ssm:*"
                  - "ecr:*"
                  - "ec2:*"
                  - "eks:*"
                  - "codepipeline:*"
                  - "sts:AssumeRole"
                Resource: "*"

  ClusterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::Region}-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
                - codebuild.amazonaws.com
                - cloudformation.amazonaws.com
                - codepipeline.amazonaws.com
                - iam.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS:
                - !GetAtt CommonRole.Arn
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/AutoScalingFullAccess
      Policies:
        - PolicyName: !Sub ${AWS::Region}-${AWS::StackName}-hub-build
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "codestar-connections:*"
                  - "s3:*"
                  - "dlm:*"
                  - "logs:*"
                  - "cloudformation:*"
                  - "elasticloadbalancing:*"
                  - "autoscaling:*"
                  - "codebuild:*"
                  - "iam:*"
                  - "secretsmanager:*"
                  - "ssm:*"
                  - "ecr:*"
                  - "ec2:*"
                  - "eks:*"
                  - "sts:AssumeRole"
                Resource: "*"

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub codepipeline-${AWS::Region}-${AWS::StackName}
      AccessControl: PublicRead
      Tags:
        - Key: Description
          Value: Artifact Bucket
        - Key: !Sub ${CostTagKey}
          Value: !Sub ${CostTagValue}

  PrebuildCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AWS::StackName}-prebuild-codebuild
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        Image: aws/codebuild/standard:4.0
        ComputeType: BUILD_GENERAL1_SMALL
        PrivilegedMode: True
      ServiceRole: !GetAtt CommonRole.Arn
      Tags:
        - Key: !Sub ${CostTagKey}
          Value: !Sub ${CostTagValue}
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2

          env:
            shell: bash

          phases:
            install:
              runtime-versions:
                python: 3.8
            pre_build:
              on-failure: ABORT
              commands:
                - echo "Install pip packages...";
                  pip3 install jinja2 --upgrade;
                  pip3 install yamllint --upgrade
            build:
              on-failure: ABORT
              commands:
                - echo "Check top file structure...";
                  ls -l
                - echo "Getting VpcId and Subnets...";
                  python3 get_vpcid_and_subnets.py --region_name=${AWS::Region} --cluster_name=${AWS::StackName}-cluster --append_parameters=opensarlab.yaml --az_postfix=d;
                  yamllint opensarlab.yaml
                - echo "Render templates...";
                  python3 create_aws_auth.py ./opensarlab.yaml ./templates/aws-auth-cm.yaml.jinja ./configs/aws-auth-cm.yaml ${AWS::StackName} ${AWS::Region};
                  python3 create_cf_cluster.py ./opensarlab.yaml ./templates/cf-cluster.yaml.jinja ./cf-cluster.yaml;
                  python3 create_profiles.py ./opensarlab.yaml ./templates/profiles.py.jinja ./hub/helm_config.d/profiles.py;
                  yamllint ./configs/aws-auth-cm.yaml ./cf-cluster.yaml
          artifacts:
            files:
              - '**/*'
            secondary-artifacts:
              PreBuildArtifact:
                files:
                  - '**/*'

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Sub codepipeline-${AWS::Region}-${AWS::StackName}
      Name: !Sub ${AWS::StackName}-Pipeline
      RestartExecutionOnUpdate: True
      RoleArn: !GetAtt CommonRole.Arn
      Stages:
        - Name: !Sub ${AWS::StackName}-Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: "1"
              Configuration:
                BranchName: !Sub ${CodeCommitBranchName}
                OutputArtifactFormat: CODE_ZIP
                PollForSourceChanges: "false"
                RepositoryName: !Sub ${CodeCommitRepoName}
              OutputArtifacts:
                - Name: SourceArtifact
              Region: !Sub ${AWS::Region}
              Namespace: SourceVariables

        - Name: !Sub ${AWS::StackName}-PreBuild
          Actions:
            - Name: PreBuild
              RunOrder: 1
              Namespace: prebuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref PrebuildCodeBuild
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: PreBuildArtifact
              Region: !Sub ${AWS::Region}

        - Name: !Sub ${AWS::StackName}-Build-Cluster
          Actions:
            - Name: BuildCluster
              RunOrder: 1
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM
                RoleArn: !GetAtt CommonRole.Arn
                StackName: !Sub ${AWS::StackName}-cluster
                TemplatePath: PreBuildArtifact::cf-cluster.yaml
              InputArtifacts:
                - Name: PreBuildArtifact
              Region: !Sub ${AWS::Region}
              RoleArn: !GetAtt CommonRole.Arn

        - Name: !Sub ${AWS::StackName}-BuildJupyterHub
          Actions:
            - Name: BuildJupyterHub
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Sub ${AWS::StackName}-cluster-jupyterhub
              InputArtifacts:
                - Name: PreBuildArtifact
              Region: !Sub ${AWS::Region}
      Tags:
        - Key: !Sub ${CostTagKey}
          Value: !Sub ${CostTagValue}

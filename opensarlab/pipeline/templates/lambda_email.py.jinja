import json
import os 
import boto3
from botocore.exceptions import ClientError

def send_email(email):

    print("Sending email of form: ")
    print(email)

    # Create a new SES resource and specify a region.
    client = boto3.client('ses', region_name='{{ aws_region }}')
    
    # Try to send the email.
    try:
        #Provide the contents of the email.
        response = client.send_email(
            Destination={
                'ToAddresses': [
                    email['RECIPIENT'],
                ],
            },
            Message={
                'Body': {
                    'Html': {
                        'Charset': "UTF-8",
                        'Data': email['BODY_HTML'],
                    },
                    'Text': {
                        'Charset': "UTF-8",
                        'Data': "",
                    },
                },
                'Subject': {
                    'Charset': "UTF-8",
                    'Data': email['SUBJECT'],
                },
            },
            Source=email['SENDER']
        )
    # Display an error if something goes wrong.	
    except ClientError as e:
        print("Something went wrong in sending email.")
        print(e.response['Error']['Message'])
    else:
        print("Email sent! Message ID:"),
        print(response['MessageId'])
        
def email_reset(userName, userEmail, fullName):
    
    # Send email to Jupyter Group 
    email_meta = {
        'SENDER': '{{ admin_email_address }}', 
        'RECIPIENT': "OSL Admin <{{ admin_email_address }}>",
        'SUBJECT': "User Password Reset",
        'BODY_HTML': """<html>
            <head></head>
            <body>
                <p>{fullName} ({userName}) at {userEmail} just reset their password for access to {{ deployment_url }}. No admin action is required at this time.</p>
            </body>
            </html>""".format(userName=userName, userEmail=userEmail, fullName=fullName) 
    }
    
    send_email(email_meta)

def email_signup_disabled(userName, userEmail, fullName):
    # Send email to Jupyter Group 
    email_meta = {
        'SENDER': '{{ admin_email_address }}', 
        'RECIPIENT': "OSL Admin <{{ admin_email_address }}>",
        'SUBJECT': "OSL User Signup",
        'BODY_HTML': """<html>
            <head></head>
            <body>
                <p>{fullName} ({userName}) at {userEmail} just signed up for access to {{ deployment_url }}. Please verify and <i>enable</i> their account.</p>
            </body>
            </html>""".format(userName=userName, userEmail=userEmail, fullName=fullName) 
    }

    send_email(email_meta)
    
    # Send email to user
    email_meta = {
        'SENDER': "{{ admin_email_address }}",
        'RECIPIENT': '"{fullName}" <{userEmail}>'.format(fullName=fullName, userEmail=userEmail),
        'SUBJECT': "OSL Account Access Pending",
        'BODY_HTML': """<html>
            <head></head>
            <body>
                <p>
                You recently have applied for access to {{ deployment_url }} operated by the Alaska Satellite Facility (ASF). 
                You are using the username '{userName}'. 
                This email confirms that your email is verified.  
                </p>
                <p>
                To complete the process, ASF must review your account before confirmation.
                You will be contacted via email if there are questions about your account.
                If there are no questions, you will be notified via email when your account has been confirmed.
                </p>
            </body>
            </html>""".format(userName=userName)
    }
    
    send_email(email_meta)

def email_signup_enabled(userName, userEmail, fullName):
    # Send email to Jupyter Group 
    email_meta = {
        'SENDER': '{{ admin_email_address }}', 
        'RECIPIENT': "OSL Admin <{{ admin_email_address }}>",
        'SUBJECT': "OSL User Signup",
        'BODY_HTML': """<html>
            <head></head>
            <body>
                <p>{fullName} ({userName}) at {userEmail} just signed up for access to {{ deployment_url }}.
                Their email was whitelisted and their account was enabled. 
                No further action is required at this time.
            </body>
            </html>""".format(userName=userName, userEmail=userEmail, fullName=fullName) 
    }

    send_email(email_meta)
    
    # Send email to user
    email_meta = {
        'SENDER': "{{ admin_email_address }}",
        'RECIPIENT': '"{fullName}" <{userEmail}>'.format(fullName=fullName, userEmail=userEmail),
        'SUBJECT': "OSL Account Access Pending",
        'BODY_HTML': """<html>
            <head></head>
            <body>
                <p>
                You recently have applied for access to {{ deployment_url }} operated by the Alaska Satellite Facility (ASF). 
                You are using the username '{userName}'. 
                This email confirms that your email is verified and your account enabled. 
                </p>
            </body>
            </html>""".format(userName=userName)
    }
    
    send_email(email_meta)
     
def lambda_handler(event, context):

    event_username = event['userName']
    event_email = event['request']['userAttributes']['email']
    event_name = event['request']['userAttributes']['name']
    event_trigger = event['triggerSource']
    event_user_pool_id = event['userPoolId']

    # If resetting password, don't disable.
    if event_trigger == 'PostConfirmation_ConfirmForgotPassword':
        email_reset(event_username, event_email, event_name)
    
    # If signing up, disable for admin confirmation
    elif event_trigger == 'PostConfirmation_ConfirmSignUp':

        {% if user_whitelist_csv is defined and user_whitelist_csv != None -%}

        s3 = boto3.resource('s3')
        bucket = s3.Bucket('{{ user_whitelist_bucket }}')
        obj = bucket.Object('{{ user_whitelist_csv }}')
        body = obj.get()['Body'].read()
        body = body.decode('utf-8')

        {% else -%}

        body = ''

        {% endif -%}

        if event_email.lower() not in body.lower():
            client = boto3.client('cognito-idp')
            response = client.admin_disable_user(
                UserPoolId=event_user_pool_id,
                Username=event_username
            )
            print(response)
            email_signup_disabled(event_username, event_email, event_name)
        
        else:
            email_signup_enabled(event_username, event_email, event_name)

    return event
